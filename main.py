import os
import requests
import aiohttp
import asyncio
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

TELEGRAM_BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY")
AIR_QUALITY_API_KEY = os.getenv("AIR_QUALITY_API_KEY")  # OpenWeatherMap Air Quality API
SOLAR_API_KEY = os.getenv("SOLAR_API_KEY")  # NASA Solar Flare API (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)


# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ API ---

def escape_markdown(text):
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Telegram Markdown V2.
    """
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in special_chars:
        text = text.replace(char, f'\\{char}')
    return text

def get_weather_data(city_name, api_key):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–µ –∏ 5-–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞.
    """
    base_url_current = "http://api.openweathermap.org/data/2.5/weather?"
    base_url_forecast = "http://api.openweathermap.org/data/2.5/forecast?"

    params_current = {
        "q": city_name,
        "appid": api_key,
        "units": "metric",  # –ú–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –µ–¥–∏–Ω–∏—Ü—ã (–¶–µ–ª—å—Å–∏–π)
        "lang": "ru"        # –†—É—Å—Å–∫–∏–π —è–∑—ã–∫
    }

    params_forecast = {
        "q": city_name,
        "appid": api_key,
        "units": "metric",  # –ú–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –µ–¥–∏–Ω–∏—Ü—ã (–¶–µ–ª—å—Å–∏–π)
        "lang": "ru"        # –†—É—Å—Å–∫–∏–π —è–∑—ã–∫
    }

    current_weather_data = None
    forecast_data = None

    try:
        response_current = requests.get(base_url_current, params=params_current)
        response_current.raise_for_status()
        current_weather_data = response_current.json()

        response_forecast = requests.get(base_url_forecast, params=params_forecast)
        response_forecast.raise_for_status()
        forecast_data = response_forecast.json()

    except requests.exceptions.HTTPError as http_err:
        if response_current.status_code == 404 or response_forecast.status_code == 404:
            return None, "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞."
        return None, f"–û—à–∏–±–∫–∞ HTTP: {http_err}"
    except requests.exceptions.ConnectionError as conn_err:
        return None, f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {conn_err}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ."
    except requests.exceptions.Timeout as timeout_err:
        return None, f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {timeout_err}."
    except requests.exceptions.RequestException as req_err:
        return None, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {req_err}."

    return current_weather_data, forecast_data

def get_air_quality_data(lat, lon, api_key):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞.
    """
    if not api_key:
        return None
    
    base_url = "http://api.openweathermap.org/data/2.5/air_pollution"
    params = {
        "lat": lat,
        "lon": lon,
        "appid": api_key
    }
    
    try:
        response = requests.get(base_url, params=params)
        response.raise_for_status()
        return response.json()
    except:
        return None

def get_solar_activity_data():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–ª–Ω–µ—á–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö –±—É—Ä—è—Ö.
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API –æ—Ç NOAA
    base_url = "https://services.swpc.noaa.gov/json/goes/primary/xray-1-day.json"
    
    try:
        response = requests.get(base_url, timeout=10)
        response.raise_for_status()
        data = response.json()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –≤—Å–ø—ã—à–∫–∞—Ö
        if data and len(data) > 0:
            latest_flare = data[-1]
            return {
                'flare_class': latest_flare.get('class', 'N/A'),
                'flare_time': latest_flare.get('time_tag', 'N/A'),
                'intensity': latest_flare.get('flux', 'N/A')
            }
    except:
        pass
    
    return None

def get_radiation_data(lat, lon):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–¥–∏–∞—Ü–∏–æ–Ω–Ω–æ–º —Ñ–æ–Ω–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º OpenWeatherMap UV Index).
    """
    if not OPENWEATHER_API_KEY:
        return None
    
    base_url = "http://api.openweathermap.org/data/2.5/air_pollution"
    params = {
        "lat": lat,
        "lon": lon,
        "appid": OPENWEATHER_API_KEY
    }
    
    try:
        response = requests.get(base_url, params=params)
        response.raise_for_status()
        data = response.json()
        
        if data and 'list' in data and len(data['list']) > 0:
            current = data['list'][0]
            return {
                'uv_index': current.get('main', {}).get('aqi', 'N/A'),
                'components': current.get('components', {})
            }
    except:
        pass
    
    return None

def format_air_quality_message(air_data):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞.
    """
    if not air_data or 'list' not in air_data or len(air_data['list']) == 0:
        return ""
    
    current = air_data['list'][0]
    aqi = current['main']['aqi']
    components = current['components']
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞
    aqi_levels = {
        1: "–•–æ—Ä–æ—à–µ–µ",
        2: "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ", 
        3: "–£–º–µ—Ä–µ–Ω–Ω–æ–µ",
        4: "–ü–ª–æ—Ö–æ–µ",
        5: "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ"
    }
    
    aqi_text = aqi_levels.get(aqi, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    message = f"\nüå¨Ô∏è *–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞*: {aqi_text} \\(AQI: {aqi}\\)\n"
    message += f"‚Ä¢ PM2\\.5: {components.get('pm2_5', 'N/A')} Œºg/m¬≥\n"
    message += f"‚Ä¢ PM10: {components.get('pm10', 'N/A')} Œºg/m¬≥\n"
    message += f"‚Ä¢ NO‚ÇÇ: {components.get('no2', 'N/A')} Œºg/m¬≥\n"
    message += f"‚Ä¢ O‚ÇÉ: {components.get('o3', 'N/A')} Œºg/m¬≥\n"
    
    return message

def format_solar_activity_message(solar_data):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–ª–Ω–µ—á–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
    """
    if not solar_data:
        return ""
    
    message = f"\n‚òÄÔ∏è *–°–æ–ª–Ω–µ—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å*:\n"
    message += f"‚Ä¢ –ö–ª–∞—Å—Å –≤—Å–ø—ã—à–∫–∏: {solar_data.get('flare_class', 'N/A')}\n"
    message += f"‚Ä¢ –í—Ä–µ–º—è: {solar_data.get('flare_time', 'N/A')}\n"
    message += f"‚Ä¢ –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {solar_data.get('intensity', 'N/A')}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö –±—É—Ä—è—Ö
    flare_class = solar_data.get('flare_class', '')
    if flare_class in ['M', 'X']:
        message += "‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ! –í–æ–∑–º–æ–∂–Ω—ã –º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏*\n"
    elif flare_class == 'C':
        message += "‚ÑπÔ∏è *–£–º–µ—Ä–µ–Ω–Ω–∞—è —Å–æ–ª–Ω–µ—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å*\n"
    else:
        message += "‚úÖ *–°–æ–ª–Ω–µ—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ*\n"
    
    return message

def format_radiation_message(radiation_data):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–¥–∏–∞—Ü–∏–∏.
    """
    if not radiation_data:
        return ""
    
    uv_index = radiation_data.get('uv_index', 'N/A')
    components = radiation_data.get('components', {})
    
    message = f"\n‚ò¢Ô∏è *–†–∞–¥–∏–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–æ–Ω*:\n"
    message += f"‚Ä¢ –£–§ –∏–Ω–¥–µ–∫—Å: {uv_index}\n"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –£–§ –∏–∑–ª—É—á–µ–Ω–∏—è
    if uv_index != 'N/A':
        try:
            uv = int(uv_index)
            if uv <= 2:
                uv_level = "–ù–∏–∑–∫–∏–π"
            elif uv <= 5:
                uv_level = "–£–º–µ—Ä–µ–Ω–Ω—ã–π"
            elif uv <= 7:
                uv_level = "–í—ã—Å–æ–∫–∏–π"
            elif uv <= 10:
                uv_level = "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π"
            else:
                uv_level = "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π"
            message += f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –£–§: {uv_level}\n"
        except:
            pass
    
    return message

def format_weather_message(current_data, forecast_data, air_data=None, solar_data=None, radiation_data=None):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    if not current_data:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ."

    city_name = current_data['name']
    country = current_data['sys']['country']
    temp = current_data['main']['temp']
    feels_like = current_data['main']['feels_like']
    description = current_data['weather'][0]['description']
    humidity = current_data['main']['humidity']
    wind_speed = current_data['wind']['speed']
    rain = current_data.get('rain', {}).get('1h', 0) if current_data.get('rain') else 0
    snow = current_data.get('snow', {}).get('1h', 0) if current_data.get('snow') else 0

    message = (
        f"–ü–æ–≥–æ–¥–∞ –≤ *{city_name}, {country}*:\n"
        f"üå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞*: {temp:.1f}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like:.1f}¬∞C)\n"
        f"‚òÅÔ∏è *–û–ø–∏—Å–∞–Ω–∏–µ*: {description.capitalize()}\n"
        f"üíß *–í–ª–∞–∂–Ω–æ—Å—Ç—å*: {humidity}%\n"
        f"üí® *–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞*: {wind_speed:.1f} –º/—Å\n"
    )
    if rain > 0:
        message += f"üåßÔ∏è *–û—Å–∞–¥–∫–∏ (–¥–æ–∂–¥—å –∑–∞ 1 —á–∞—Å)*: {rain} –º–º\n"
    if snow > 0:
        message += f"üå®Ô∏è *–û—Å–∞–¥–∫–∏ (—Å–Ω–µ–≥ –∑–∞ 1 —á–∞—Å)*: {snow} –º–º\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞
    if air_data:
        message += format_air_quality_message(air_data)

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–ª–Ω–µ—á–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if solar_data:
        message += format_solar_activity_message(solar_data)

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–¥–∏–∞—Ü–∏–∏
    if radiation_data:
        message += format_radiation_message(radiation_data)

    if forecast_data and forecast_data.get('list'):
        message += "\n*–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è:*\n"
        
        forecast_by_day = {}
        for item in forecast_data['list']:
            date = item['dt_txt'].split(' ')[0] 
            if date not in forecast_by_day:
                forecast_by_day[date] = item
                if len(forecast_by_day) >= 3: 
                    break

        for date, item in forecast_by_day.items():
            temp_min = item['main']['temp_min']
            temp_max = item['main']['temp_max']
            description_forecast = item['weather'][0]['description']
            message += (
                f"üóìÔ∏è *{date}*: {description_forecast.capitalize()}, "
                f"—Ç–µ–º–ø. –æ—Ç {temp_min:.1f}¬∞C –¥–æ {temp_max:.1f}¬∞C\n"
            )

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    return escape_markdown(message)

# --- –§—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Telegram –±–æ—Ç–∞ ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∂–µ—Ç —Ç–µ–±–µ –ø–æ–≥–æ–¥—É. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞!')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help."""
    await update.message.reply_text('–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ö–∏–µ–≤" –∏–ª–∏ "London").')

async def weather_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞)."""
    city_name = update.message.text
    
    if not OPENWEATHER_API_KEY:
        await update.message.reply_text("–û—à–∏–±–∫–∞: API –∫–ª—é—á OpenWeatherMap –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞.")
        return

    await update.message.reply_text(f"–ò—â—É –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ {city_name}...")
    
    current_weather, forecast = get_weather_data(city_name, OPENWEATHER_API_KEY)

    if current_weather:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞
        lat = current_weather['coord']['lat']
        lon = current_weather['coord']['lon']
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        air_data = get_air_quality_data(lat, lon, AIR_QUALITY_API_KEY)
        solar_data = get_solar_activity_data()
        radiation_data = get_radiation_data(lat, lon)
        
        weather_text = format_weather_message(current_weather, forecast, air_data, solar_data, radiation_data)
        await update.message.reply_markdown_v2(weather_text)
    else:
        await update.message.reply_text(forecast or "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞.")


async def unknown_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    await update.message.reply_text("–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /help.")

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    if not TELEGRAM_BOT_TOKEN:
        print("–û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ BotFather.")
        return
    if not OPENWEATHER_API_KEY:
        print("–û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENWEATHER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ API –∫–ª—é—á OpenWeatherMap.")
        return
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö API –∫–ª—é—á–∞—Ö
    if not AIR_QUALITY_API_KEY:
        print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: AIR_QUALITY_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    if not SOLAR_API_KEY:
        print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: SOLAR_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–ª–Ω–µ—á–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞.")

    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, weather_message))
    application.add_handler(MessageHandler(filters.COMMAND | filters.TEXT, unknown_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û—Ç–ø—Ä–∞–≤—å –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram.")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()